// Code generated by `go-sdk-gen`. DO NOT EDIT.

package petstore

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strconv"
)

var _ error = (*Error)(nil)

// Error is a schema definition.
type Error struct {
	// Format: int32
	Code    int    `json:"code"`
	Message string `json:"message"`
}

func (e *Error) Error() string {
	return fmt.Sprintf("code=%v, message=%v", e.Code, e.Message)
}

// Pet is a schema definition.
type Pet struct {
	// Format: int64
	Id   int     `json:"id"`
	Name string  `json:"name"`
	Tag  *string `json:"tag,omitempty"`
}

// Pets is a schema definition.
// Max items: 100
type Pets []Pet

// CreatePetsBody is a schema definition.
type CreatePetsBody struct {
	// Format: int64
	Id   int     `json:"id"`
	Name string  `json:"name"`
	Tag  *string `json:"tag,omitempty"`
}

// ListPetsParams: query parameters for listPets
type ListPetsParams struct {
	// How many items to return at one time (max 100)
	Limit *int
}

// QueryValues converts [ListPetsParams] into [url.Values].
func (p *ListPetsParams) QueryValues() url.Values {
	q := make(url.Values)

	if p.Limit != nil {
		q.Set("limit", strconv.Itoa(*p.Limit))
	}

	return q
}

type PetsService service

// ListPets: List all pets
func (s *PetsService) ListPets(ctx context.Context, params ListPetsParams) (*Pets, error) {
	path := fmt.Sprintf("/pets")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	req.URL.RawQuery = params.QueryValues().Encode()

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v Pets
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	default:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	}
}

// CreatePets: Create a pet
func (s *PetsService) CreatePets(ctx context.Context, body CreatePetsBody) error {
	buf := new(bytes.Buffer)
	if err := json.NewEncoder(buf).Encode(body); err != nil {
		return fmt.Errorf("encoding json body request failed: %v", err)
	}

	path := fmt.Sprintf("/pets")

	req, err := s.client.NewRequest(ctx, http.MethodPost, path, buf)
	if err != nil {
		return fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusCreated:
		return nil
	default:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return fmt.Errorf("read error response: %s", err.Error())
		}

		return &apiErr
	}
}

// ShowPetById: Info for a specific pet
func (s *PetsService) ShowPetById(ctx context.Context, petId string) (*Pet, error) {
	path := fmt.Sprintf("/pets/%v", petId)

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v Pet
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	default:
		var apiErr Error
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return nil, fmt.Errorf("read error response: %s", err.Error())
		}

		return nil, &apiErr
	}
}

// Code generated by `go-sdk-gen`. DO NOT EDIT.

package stringformats

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
)

// AllStringFormats is a schema definition.
type AllStringFormats struct {
	// Format: date
	Date Date `json:"date"`
	// Format: date_time
	DateTime string `json:"date_time"`
	// Format: time
	Time Time `json:"time"`
}

// GetAllStringFormatsParams: query parameters for getAllStringFormats
type GetAllStringFormatsParams struct {
	Date *Date
	Time *Time
}

// QueryValues converts [GetAllStringFormatsParams] into [url.Values].
func (p *GetAllStringFormatsParams) QueryValues() url.Values {
	q := make(url.Values)

	if p.Date != nil {
		q.Set("date", p.Date.String())
	}

	if p.Time != nil {
		q.Set("time", p.Time.String())
	}

	return q
}

type SharedService service

// GetAllStringFormats: Get all string formats
func (s *SharedService) GetAllStringFormats(ctx context.Context, params GetAllStringFormatsParams) (*AllStringFormats, error) {
	path := fmt.Sprintf("/string-formats")

	req, err := s.client.NewRequest(ctx, http.MethodGet, path, http.NoBody)
	if err != nil {
		return nil, fmt.Errorf("error building request: %v", err)
	}
	req.URL.RawQuery = params.QueryValues().Encode()

	resp, err := s.client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %v", err)
	}
	defer resp.Body.Close()

	switch resp.StatusCode {
	case http.StatusOK:
		var v AllStringFormats
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
	default:
		return nil, fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
	}
}

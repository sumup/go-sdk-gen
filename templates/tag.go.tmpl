// Code generated by `go-sdk-gen`. DO NOT EDIT.

package {{.PackageName}}

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"encoding/xml"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"os"
	"path"
	"strings"
	"time"
	
	"gopkg.in/yaml.v2"
)

{{ range $type := .Types }}
{{ $type.String }}
{{ end }}

{{ if .Service }}
type {{.Service}} service

{{ range $method := .Methods }}
{{ $responseType := .ResponseType}}
{{- with .Description}}
// {{.}}
{{- end }}
func (s *{{$.Service}}) {{.FunctionName}}({{.ParamsString}}) {{with .ResponseType}}(*{{.}}, error){{else}}error{{end}} {
	{{with .HasBody -}}
    buf := new(bytes.Buffer)
    if err := json.NewEncoder(buf).Encode(body); err != nil {
        return {{with $responseType}}nil, {{end}}fmt.Errorf("encoding json body request failed: %v", err)
    }

	{{ end -}}
	path := {{.Path}}

    req, err := s.client.NewRequest(ctx, {{.HTTPMethod}}, path, {{if .HasBody }}buf{{else}}http.NoBody{{end}})
	if err != nil {
		return {{with $responseType}}nil, {{end}}fmt.Errorf("error building request: %v", err)
	}

	{{- with .QueryParams }}
	req.URL.RawQuery = params.QueryValues().Encode()
	{{- end }}

    resp, err := s.client.Do(req)
    if err != nil {
        return {{with $responseType}}nil, {{end}}fmt.Errorf("error sending request: %v", err)
    }
    defer resp.Body.Close()

	switch resp.StatusCode {
	{{- range $resp := .Responses }}
	{{- if $resp.IsDefault }}
	default:
	{{- else }}
	case {{ $resp.Code | httpStatusCode }}:
	{{- end }}
		{{- if $resp.IsErr }}
		{{- with .Type }}
		var apiErr {{ $resp.Type }}
		if err := json.NewDecoder(resp.Body).Decode(&apiErr); err != nil {
			return {{with $responseType}}nil, {{end}}fmt.Errorf("read error response: %s", err.Error())
		}

		return {{with $responseType}}nil, {{end}}&apiErr
		{{- else}}
		return {{with $responseType}}nil, {{end}}errors.New("{{ $resp.ErrDescription }}")
	    {{- end}}
		{{- else if $resp.IsUnexpected }}
		return {{with $responseType}}nil, {{end}}fmt.Errorf("unexpected response %d: %s", resp.StatusCode, http.StatusText(resp.StatusCode))
		{{- else }}
		{{- with .Type }}
	    var v {{.}}
		if err := json.NewDecoder(resp.Body).Decode(&v); err != nil {
			return nil, fmt.Errorf("decode response: %s", err.Error())
		}

		return &v, nil
		{{- else}}
		return {{with $responseType}}nil, {{end}}nil
	    {{- end}}
		{{- end }}
	{{- end }}
	}
}
{{ end }}
{{ end }}

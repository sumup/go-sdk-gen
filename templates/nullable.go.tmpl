// Code generated by `go-sdk-gen`. DO NOT EDIT.

package nullable

import (
	"encoding/json"
	"fmt"
)

var _ json.Marshaler = (*field[string])(nil)
var _ json.Unmarshaler = (*field[string])(nil)

// Field is a wrapper for nullable fields to distinguish zero values
// from null or omitted fields.
type field[T any] struct {
	Value   T
	Null    bool
	Present bool
}

func (f field[T]) IsZero() bool {
	return !f.Present
}

func (f field[T]) MarshalJSON() ([]byte, error) {
	if f.Null {
		return []byte("null"), nil // Explicitly set to null
	}
	return json.Marshal(f.Value)
}

func (f *field[T]) UnmarshalJSON(data []byte) error {
	if string(data) == "null" {
		f.Null = true
		f.Present = true
		var zeroValue T
		f.Value = zeroValue // Reset value
		return nil
	}
	f.Present = true
	return json.Unmarshal(data, &f.Value)
}

func (f field[T]) String() string {
	return fmt.Sprintf("%v", f.Value)
}

// Value is a nullable field helper for constructing a generic nullable field
// with a value.
func Value[T any](value T) field[T] { return field[T]{Value: value, Present: true} }

// Null is a nullable field helper for constructing a generic null fields.
func Null[T any]() field[T] { return field[T]{Null: true, Present: true} }

// Int is a nullable field helper for constructing nullable integers with a value.
func Int(value int) field[int] { return Value(value) }

// String is a nullable field helper for constructing nullable strings with a value.
func String(value string) field[string] { return Value(value) }

// Float is a nullable field helper for constructing nullable floats with a value.
func Float(value float64) field[float64] { return Value(value) }

// Bool is a nullable field helper for constructing nullable bools with a value.
func Bool(value bool) field[bool] { return Value(value) }
